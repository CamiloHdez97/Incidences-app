// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiIncidencesContext))]
    [Migration("20230816115842_InitialCreateMig")]
    partial class InitialCreateMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.City", b =>
                {
                    b.Property<string>("IdCity")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdRegFk")
                        .HasColumnType("longtext");

                    b.Property<string>("NameCity")
                        .HasColumnType("longtext");

                    b.Property<string>("RegionIdRegion")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCity");

                    b.HasIndex("RegionIdRegion");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Property<string>("IdCountry")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NameCountry")
                        .HasColumnType("longtext");

                    b.HasKey("IdCountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameGender")
                        .HasColumnType("longtext");

                    b.HasKey("IdGender");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Domain.Lounge", b =>
                {
                    b.Property<int>("IdLounge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("NameLounge")
                        .HasColumnType("longtext");

                    b.HasKey("IdLounge");

                    b.ToTable("lounges");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<string>("IdPerson")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CityIdCity")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("GenderIdGender")
                        .HasColumnType("int");

                    b.Property<int>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<int>("IdGenderFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTypePerFk")
                        .HasColumnType("int");

                    b.Property<string>("NamePerson")
                        .HasColumnType("longtext");

                    b.Property<int?>("TypePersonIdTypePerson")
                        .HasColumnType("int");

                    b.HasKey("IdPerson");

                    b.HasIndex("CityIdCity");

                    b.HasIndex("GenderIdGender");

                    b.HasIndex("TypePersonIdTypePerson");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Property<string>("IdRegion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CountryIdCountry")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IdCountryFk")
                        .HasColumnType("longtext");

                    b.Property<string>("NameRegion")
                        .HasColumnType("longtext");

                    b.HasKey("IdRegion");

                    b.HasIndex("CountryIdCountry");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.TrainerLounge", b =>
                {
                    b.Property<string>("IdPerTrainerFk")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdLoungeFk")
                        .HasColumnType("int");

                    b.Property<int?>("LoungeIdLounge")
                        .HasColumnType("int");

                    b.Property<string>("PersonIdPerson")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdPerTrainerFk");

                    b.HasIndex("LoungeIdLounge");

                    b.HasIndex("PersonIdPerson");

                    b.ToTable("TrainerLounges");
                });

            modelBuilder.Entity("Domain.Tuition", b =>
                {
                    b.Property<int>("IdTuition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdLoungeFk")
                        .HasColumnType("int");

                    b.Property<string>("IdPersonFk")
                        .HasColumnType("longtext");

                    b.Property<int?>("LoungeIdLounge")
                        .HasColumnType("int");

                    b.Property<string>("PersonIdPerson")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdTuition");

                    b.HasIndex("LoungeIdLounge");

                    b.HasIndex("PersonIdPerson");

                    b.ToTable("Tuitions");
                });

            modelBuilder.Entity("Domain.TypePerson", b =>
                {
                    b.Property<int>("IdTypePerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescriptionTypePerson")
                        .HasColumnType("longtext");

                    b.HasKey("IdTypePerson");

                    b.ToTable("TypePersons");
                });

            modelBuilder.Entity("Domain.City", b =>
                {
                    b.HasOne("Domain.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionIdRegion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityIdCity");

                    b.HasOne("Domain.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderIdGender");

                    b.HasOne("Domain.TypePerson", "TypePerson")
                        .WithMany("Persons")
                        .HasForeignKey("TypePersonIdTypePerson");

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("TypePerson");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryIdCountry");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.TrainerLounge", b =>
                {
                    b.HasOne("Domain.Lounge", "Lounge")
                        .WithMany("TrainerLounges")
                        .HasForeignKey("LoungeIdLounge");

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("TrainerLounges")
                        .HasForeignKey("PersonIdPerson");

                    b.Navigation("Lounge");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Tuition", b =>
                {
                    b.HasOne("Domain.Lounge", "Lounge")
                        .WithMany("Tuitions")
                        .HasForeignKey("LoungeIdLounge");

                    b.HasOne("Domain.Person", "Person")
                        .WithMany("Tuitions")
                        .HasForeignKey("PersonIdPerson");

                    b.Navigation("Lounge");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Lounge", b =>
                {
                    b.Navigation("TrainerLounges");

                    b.Navigation("Tuitions");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("TrainerLounges");

                    b.Navigation("Tuitions");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.TypePerson", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
